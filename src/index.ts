import {
  CarWrong as SingleResponsibilityCarWrong,
  CarOk as SingleResponsibilityCarOk,
  CarLogger as SingleResponsibilityCarLogger
} from './S';
import {
  cars as openCloseCars,
  printAveragePriceWrong as openClosePrintAveragePriceWrong,
  brandCars as openCloseBrandCars,
  printAveragePriceOk as openClosePrintAveragePriceOk,
} from './O';

// üíé S OF SOLID (SINGLE RESPONSIBILITY)
const solidSectionSNode = document.getElementById('S');

if (solidSectionSNode) {
  solidSectionSNode.innerHTML = `
    <header>
      <h2>S: Principio de responsabilidad √∫nica</h2>
    </header>
    <section>
      <p>Como su propio nombre indica, establece que una clase, componente o microservicio debe ser responsable de una sola cosa (el tan aclamado t√©rmino ‚Äúdecoupled‚Äù en ingl√©s). Si por el contrario, una clase tiene varias responsabilidades, esto implica que el cambio en una responsabilidad provocar√° la modificaci√≥n en otra responsabilidad.</p>
    </section>
`;
}

// ‚ùå Wrong example
const myCarWrong = new SingleResponsibilityCarWrong("Mercedes", "Blue");

console.log("‚ùå");
myCarWrong.description();

// ‚úîÔ∏è Good example
const myCarOk = new SingleResponsibilityCarOk("Mercedes", "Blue");
const myCarLogger = new SingleResponsibilityCarLogger(myCarOk);

console.log("‚úîÔ∏è");
myCarLogger.description();

// üíé O OF SOLID (OPEN CLOSED PRINCIPLE)
const solidSectionONode = document.getElementById('O');

if (solidSectionONode) {
  solidSectionONode.innerHTML = `
    <header>
      <h2>O: Principio abierto/cerrado</h2>
    </header>
    <section>
      <p>
        Establece que las entidades software (clases, m√≥dulos y funciones) deber√≠an estar abiertos para su extensi√≥n, pero cerrados para su modificaci√≥n.
      </p>
    </section>
  `;
}

// ‚ùå Wrong example
console.log("‚ùå");
openClosePrintAveragePriceWrong(openCloseCars);

// ‚úîÔ∏è Good example
console.log("‚úîÔ∏è");
openClosePrintAveragePriceOk(openCloseBrandCars);
