import {
  CarWrong as SingleResponsibilityCarWrong,
  CarOk as SingleResponsibilityCarOk,
  CarLogger as SingleResponsibilityCarLogger
} from './S';
import {
  cars as openCloseCars,
  printAveragePriceWrong as openClosePrintAveragePriceWrong,
  brandCars as openCloseBrandCars,
  printAveragePriceOk as openClosePrintAveragePriceOk,
} from './O';
import {
  brandCars as liskovSubstitutionBrandCars,
  printSeatsWrong as liskovSubstitutionPrintSeatsWrong,
  printSeatsOk as liskovSubstitutionPrintSeatsOk,
} from './L';
import {
  DatabaseServiceWrong as DependencyInversionDatabaseServiceWrong,
  GetServiceWrong as DependencyInversionGetServiceWrong,
  DatabaseServiceOk as DependencyInversionDatabaseServiceOk,
  APIService as DependencyInversionAPIService,
  GetServiceOk as DependencyInversionGetServiceOk,
} from './D';

// üíé S OF SOLID (SINGLE RESPONSIBILITY)
const solidSectionSNode = document.getElementById('S');

if (solidSectionSNode) {
  solidSectionSNode.innerHTML = `
    <header>
      <h2>S: Principio de responsabilidad √∫nica</h2>
    </header>
    <section>
      <p>Como su propio nombre indica, establece que una clase, componente o microservicio debe ser responsable de una sola cosa (el tan aclamado t√©rmino ‚Äúdecoupled‚Äù en ingl√©s). Si por el contrario, una clase tiene varias responsabilidades, esto implica que el cambio en una responsabilidad provocar√° la modificaci√≥n en otra responsabilidad.</p>
    </section>
  `;
}

// ‚ùå Wrong example
const myCarWrong = new SingleResponsibilityCarWrong("Mercedes", "Blue");

console.log("‚ùå");
myCarWrong.description();

// ‚úîÔ∏è Good example
const myCarOk = new SingleResponsibilityCarOk("Mercedes", "Blue");
const myCarLogger = new SingleResponsibilityCarLogger(myCarOk);

console.log("‚úîÔ∏è");
myCarLogger.description();

// üíé O OF SOLID (OPEN CLOSED PRINCIPLE)
const solidSectionONode = document.getElementById('O');

if (solidSectionONode) {
  solidSectionONode.innerHTML = `
    <header>
      <h2>O: Principio abierto/cerrado</h2>
    </header>
    <section>
      <p>
        Establece que las entidades software (clases, m√≥dulos y funciones) deber√≠an estar abiertos para su extensi√≥n, pero cerrados para su modificaci√≥n.
      </p>
    </section>
  `;
}

// ‚ùå Wrong example
console.log("‚ùå");
openClosePrintAveragePriceWrong(openCloseCars);

// ‚úîÔ∏è Good example
console.log("‚úîÔ∏è");
openClosePrintAveragePriceOk(openCloseBrandCars);

// üíé L OF SOLID (LISKOV SUBSTITUTION PRINCIPLE)
const solidSectionLNode = document.getElementById('L');

if (solidSectionLNode) {
  solidSectionLNode.innerHTML = `
    <header>
      <h1>L: Principio de substituci√≥n de Liskov</h1>
    </header>
    <main>
      <p>
        Declara que una subclase debe ser sustituible por su super clase, y si al hacer esto, el programa falla, estaremos violando este principio.
      </p>
      <p>
        Cumpliendo con este principio se confirmar√° que nuestro programa tiene una jerarqu√≠a de clases f√°cil de entender y un c√≥digo reusable.
      </p>
    </main>
  `;
}

// ‚ùå Wrong example
console.log("‚ùå");
liskovSubstitutionPrintSeatsWrong(liskovSubstitutionBrandCars);

// ‚úîÔ∏è Good example
console.log("‚úîÔ∏è");
liskovSubstitutionPrintSeatsOk(liskovSubstitutionBrandCars);

// üíé I OF SOLID (INTERFACE SEGREGATION PRINCIPLE)

const solidSectionINode = document.getElementById('I');

if (solidSectionINode) {
  solidSectionINode.innerHTML = `
    <header>
      <h2>I: Principio de segregaci√≥n de interfaz</h2>
    </header>
    <main>
      <p>
        Este principio establece que los clientes no deber√≠an verse forzados a depender de interfaces que no usan.
      </p>
      <p>
        Dicho de otra manera, cuando un cliente depende de una clase que implementa una interfaz cuya funcionalidad
        este cliente no usa, pero que otros clientes s√≠ usan, este cliente estar√° siendo afectado por los cambios
        que fuercen otros clientes en dicha interfaz.
      </p>
    </main>
  `;
}

// üíé D OF SOLID (DEPENDENCY INVERSION PRINCIPLE)

const solidSectionDNode = document.getElementById('D');

if (solidSectionDNode) {
  solidSectionDNode.innerHTML = `
    <header>
      <h2>D: Principio de inversi√≥n de dependencias</h2>
    </header>
    <main>
      <p>
        Establece que las dependencias deben estar en las abstracciones, no en las concreciones. Es decir:
      </p>
      <ul>
        <li>Los m√≥dulos de alto nivel no deber√≠an depender de m√≥dulos de bajo nivel. Ambos deber√≠an depender de abstracciones.</li>
        <li>Las abstracciones no deber√≠an depender de detalles. Los detalles deber√≠an depender de abstracciones.</li>
      </ul>
      <p>
        En alg√∫n momento nuestro programa o aplicaci√≥n llegar√° a estar formado por muchos m√≥dulos. Cuando esto pase, es cuando debemos usar inyecci√≥n de dependencias,
        lo que nos permitir√° controlar las funcionalidades desde un sitio concreto en vez de tenerlas esparcidas por todo el programa.
        Adem√°s, este aislamiento nos permitir√° realizar testing mucho m√°s f√°cilmente.
      </p>
    </main>
  `;
}

// ‚ùå Wrong example
console.log("‚ùå");

const databaseService = new DependencyInversionDatabaseServiceWrong();
const get = new DependencyInversionGetServiceWrong(databaseService);

console.log(get.names());

// ‚úîÔ∏è Good example
const apiService = new DependencyInversionAPIService();
const databaseServiceOk = new DependencyInversionDatabaseServiceOk();

const getOk1 = new DependencyInversionGetServiceOk(apiService);
const getOk2 = new DependencyInversionGetServiceOk(databaseServiceOk);

console.log("‚úîÔ∏è");
console.log(getOk1.names());
console.log(getOk2.names());
